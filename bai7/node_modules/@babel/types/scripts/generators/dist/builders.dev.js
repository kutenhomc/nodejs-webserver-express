"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateBuilders;

var _index = _interopRequireDefault(require("../../lib/index.js"));

var _index2 = _interopRequireDefault(require("../../lib/definitions/index.js"));

var _formatBuilderName = _interopRequireDefault(require("../utils/formatBuilderName.js"));

var _lowerFirst = _interopRequireDefault(require("../utils/lowerFirst.js"));

var _stringifyValidator = _interopRequireDefault(require("../utils/stringifyValidator.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function areAllRemainingFieldsNullable(fieldName, fieldNames, fields) {
  var index = fieldNames.indexOf(fieldName);
  return fieldNames.slice(index).every(function (_) {
    return isNullable(fields[_]);
  });
}

function hasDefault(field) {
  return field["default"] != null;
}

function isNullable(field) {
  return field.optional || hasDefault(field);
}

function sortFieldNames(fields, type) {
  return fields.sort(function (fieldA, fieldB) {
    var indexA = _index["default"].BUILDER_KEYS[type].indexOf(fieldA);

    var indexB = _index["default"].BUILDER_KEYS[type].indexOf(fieldB);

    if (indexA === indexB) return fieldA < fieldB ? -1 : 1;
    if (indexA === -1) return 1;
    if (indexB === -1) return -1;
    return indexA - indexB;
  });
}

function generateBuilderArgs(type) {
  var fields = _index["default"].NODE_FIELDS[type];
  var fieldNames = sortFieldNames(Object.keys(_index["default"].NODE_FIELDS[type]), type);
  var builderNames = _index["default"].BUILDER_KEYS[type];
  var args = [];
  fieldNames.forEach(function (fieldName) {
    var field = fields[fieldName]; // Future / annoying TODO:
    // MemberExpression.property, ObjectProperty.key and ObjectMethod.key need special cases; either:
    // - convert the declaration to chain() like ClassProperty.key and ClassMethod.key,
    // - declare an alias type for valid keys, detect the case and reuse it here,
    // - declare a disjoint union with, for example, ObjectPropertyBase,
    //   ObjectPropertyLiteralKey and ObjectPropertyComputedKey, and declare ObjectProperty
    //   as "ObjectPropertyBase & (ObjectPropertyLiteralKey | ObjectPropertyComputedKey)"

    var typeAnnotation = (0, _stringifyValidator["default"])(field.validate, "t.");

    if (isNullable(field) && !hasDefault(field)) {
      typeAnnotation += " | null";
    }

    if (builderNames.includes(fieldName)) {
      var bindingIdentifierName = _index["default"].toBindingIdentifierName(fieldName);

      if (areAllRemainingFieldsNullable(fieldName, builderNames, fields)) {
        args.push("".concat(bindingIdentifierName).concat(isNullable(field) ? "?:" : ":", " ").concat(typeAnnotation));
      } else {
        args.push("".concat(bindingIdentifierName, ": ").concat(typeAnnotation).concat(isNullable(field) ? " | undefined" : ""));
      }
    }
  });
  return args;
}

function generateBuilders(kind) {
  return kind === "uppercase.js" ? generateUppercaseBuilders() : generateLowercaseBuilders();
}

function generateLowercaseBuilders() {
  var output = "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport builder from \"../builder\";\nimport type * as t from \"../..\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n";
  var reservedNames = new Set(["super", "import"]);
  Object.keys(_index2["default"].BUILDER_KEYS).forEach(function (type) {
    var defArgs = generateBuilderArgs(type);
    var formatedBuilderName = (0, _formatBuilderName["default"])(type);
    var formatedBuilderNameLocal = reservedNames.has(formatedBuilderName) ? "_".concat(formatedBuilderName) : formatedBuilderName;
    output += "".concat(formatedBuilderNameLocal === formatedBuilderName ? "export " : "", "function ").concat(formatedBuilderNameLocal, "(").concat(defArgs.join(", "), "): t.").concat(type, " { return builder(\"").concat(type, "\", ...arguments); }\n");

    if (formatedBuilderNameLocal !== formatedBuilderName) {
      output += "export { ".concat(formatedBuilderNameLocal, " as ").concat(formatedBuilderName, " };\n");
    } // This is needed for backwards compatibility.
    // It should be removed in the next major version.
    // JSXIdentifier -> jSXIdentifier


    if (/^[A-Z]{2}/.test(type)) {
      output += "export { ".concat(formatedBuilderNameLocal, " as ").concat((0, _lowerFirst["default"])(type), " }\n");
    }
  });
  Object.keys(_index2["default"].DEPRECATED_KEYS).forEach(function (type) {
    var newType = _index2["default"].DEPRECATED_KEYS[type];
    var formatedBuilderName = (0, _formatBuilderName["default"])(type);
    output += "/** @deprecated */\nfunction ".concat(type, "(...args: Array<any>): any {\n  console.trace(\"The node type ").concat(type, " has been renamed to ").concat(newType, "\");\n  return builder(\"").concat(type, "\", ...args);\n}\nexport { ").concat(type, " as ").concat(formatedBuilderName, " };\n"); // This is needed for backwards compatibility.
    // It should be removed in the next major version.
    // JSXIdentifier -> jSXIdentifier

    if (/^[A-Z]{2}/.test(type)) {
      output += "export { ".concat(type, " as ").concat((0, _lowerFirst["default"])(type), " }\n");
    }
  });
  return output;
}

function generateUppercaseBuilders() {
  var output = "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/**\n * This file is written in JavaScript and not TypeScript because uppercase builders\n * conflict with AST types. TypeScript reads the uppercase.d.ts file instead.\n */\n\n export {\n";
  Object.keys(_index2["default"].BUILDER_KEYS).forEach(function (type) {
    var formatedBuilderName = (0, _formatBuilderName["default"])(type);
    output += "  ".concat(formatedBuilderName, " as ").concat(type, ",\n");
  });
  Object.keys(_index2["default"].DEPRECATED_KEYS).forEach(function (type) {
    var formatedBuilderName = (0, _formatBuilderName["default"])(type);
    output += "  ".concat(formatedBuilderName, " as ").concat(type, ",\n");
  });
  output += " } from './index';\n";
  return output;
}